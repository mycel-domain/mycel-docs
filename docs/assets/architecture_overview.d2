direction: right
OtherChains: Other Chains{
  "UserContract": Smart Contract
  "NSC": Name Service Contract

  UserContract -> NSC: resolve()
  NSC -> Event:  Emit 
  NSC -> UserContract:  Callback
}

mycel: mycel{
  Resolver {
  EventHandler: Event Handler
  IBCHandler: IBC Handler

  EventHandler -> Resolver : Resolve domain name
  Resolver -> EventHandler

  IBCHandler -> Resolver : Resolve domain name
  Resolver -> IBCHandler
  }
  Epochs {
  }
  Incentives {
    IncentiveStore: Incentive Store
    DistributeRewards: Distribute Rewards

    IncentiveStore <- DistributeRewards: Get rewards to distribute

  }
  Registry {
    DomainStore: Domain Store
    RegisterDomain: Register Domain
    UpdateRecord: Update Record

    RegisterDomain -> DomainStore: Register domain
    UpdateRecord -> DomainStore: Update record
  }

  Resolver.Resolver -> Registry.DomainStore: Resolve domain name
  Registry.RegisterDomain -> Incentives: Regsitration fee
  Registry.RegisterDomain -> Incentives.IncentiveStore: Store rewards for each period
  Epochs -> Incentives.DistributeRewards: Distrbute rewards on every period
  Epochs -> Resolver.EventHandler 
}


User: {
  shape: image
  icon: https://icons.terrastruct.com/essentials%2F359-users.svg
}

Validator: {
  shape: image
  icon: https://icons.terrastruct.com/essentials%2F359-users.svg
}
# User -> OtherChains.userContract : Resolve via smart contract
# User -> mycel.Resolver.IBCHandler : Resolve via IBC

User -> mycel.Registry.RegisterDomain : Register domain
User -> mycel.Registry.UpdateRecord : Update record

OtherChains.Event <-> mycel.Resolver.eventHandler :  Hook
mycel.Resolver.EventHandler -> OtherChains.NSC : Result
mycel.Incentives.DistributeRewards -> Validator :Reward
